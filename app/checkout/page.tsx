"use client";

import { useState, useEffect } from "react";
import { Voucher, Address } from "@/types";
import api from "@/lib/axios";
import axios from "axios";
import { toast } from "react-toastify";
import { useCart } from "@/context/CartContext";
import { useAuth } from "@/context/AuthContext";
import { useRouter } from "next/navigation";
import { addressService } from "@/lib/addressService";

function CheckoutPage() {
  const router = useRouter();
  const { cart, removeMultipleFromCart } = useCart();
  const { profile } = useAuth();
  const [vouchers, setVouchers] = useState<Voucher[]>([]);
  const [selectedItems, setSelectedItems] = useState<number[]>([]);
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [selectedAddressId, setSelectedAddressId] = useState<number | null>(
    null
  );
  const [addressLoading, setAddressLoading] = useState(true);

  const [form, setForm] = useState({
    fullName: "",
    phone: "",
    email: "",
    notes: "",
    payment: "",
    voucher: "",
  });

  const [errorFields, setErrorFields] = useState<string[]>([]);
  const [selectedVoucher, setSelectedVoucher] = useState<Voucher | null>(null);

  useEffect(() => {
    if (profile) {
      setForm((prev) => ({
        ...prev,
        fullName: profile.name,
        phone: profile.phone,
        email: profile.email,
      }));
    }
  }, [profile]);

  useEffect(() => {
    const saved = localStorage.getItem("checkout_user_info");
    if (saved) {
      const savedData = JSON.parse(saved);
      // Reset payment v·ªÅ tr·ªëng khi v√†o trang checkout
      setForm((f) => ({
        ...f,
        ...savedData,
        payment: "", // Lu√¥n reset v·ªÅ tr·ªëng
      }));
    }
  }, []);

  useEffect(() => {
    setForm((f) => ({
      ...f,
      payment: "",
    }));
  }, []);

  useEffect(() => {
    if (cart.length === 0) {
      router.push("/cart");
    }
  }, [cart.length, router]);

  // Load selected items from localStorage
  useEffect(() => {
    const savedSelected = localStorage.getItem("cart_selected");
    if (savedSelected) {
      try {
        const parsedSelected = JSON.parse(savedSelected);
        setSelectedItems(parsedSelected.map((item: { id: number }) => item.id));
      } catch (error) {
        console.error("Error parsing cart_selected from localStorage:", error);
        setSelectedItems([]);
      }
    }
  }, []);

  useEffect(() => {
    async function fetchVouchers() {
      const res = await api.get<Voucher[]>("/voucher");
      setVouchers(res.data);
    }
    fetchVouchers();
  }, []);

  // Load addresses
  useEffect(() => {
    const loadAddresses = async () => {
      try {
        setAddressLoading(true);
        const data = await addressService.getAllAddresses();
        setAddresses(data);
        // T·ª± ƒë·ªông ch·ªçn ƒë·ªãa ch·ªâ m·∫∑c ƒë·ªãnh n·∫øu c√≥
        const defaultAddress = data.find((addr) => addr.is_default);
        if (defaultAddress) {
          setSelectedAddressId(defaultAddress.id);
        }
      } catch (error) {
        console.error("Error loading addresses:", error);
        toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë·ªãa ch·ªâ");
      } finally {
        setAddressLoading(false);
      }
    };
    loadAddresses();
  }, []);

  // T√≠nh t·ªïng ti·ªÅn ch·ªâ cho nh·ªØng items ƒë∆∞·ª£c ch·ªçn
  const subtotal = cart
    ? cart
        .filter((item) => selectedItems.includes(item.id))
        .reduce((sum, item) => {
          // T√≠nh gi√° sau khi gi·∫£m gi√°
          const discountedPrice =
            item.product.price * (1 - item.product.discount / 100);
          return sum + discountedPrice * item.quantity;
        }, 0)
    : 0;

  let discount = 0;
  if (
    selectedVoucher &&
    subtotal >= selectedVoucher.min_order_value &&
    selectedVoucher.value
  ) {
    if (selectedVoucher.type === "PERCENTAGE") {
      // Gi·∫£m theo ph·∫ßn trƒÉm
      const calculatedDiscount = subtotal * (selectedVoucher.value / 100);
      discount = Math.min(selectedVoucher.max_discount, calculatedDiscount);
    } else if (selectedVoucher.type === "NORMAL") {
      // Gi·∫£m theo s·ªë ti·ªÅn c·ªë ƒë·ªãnh
      discount = Math.min(selectedVoucher.max_discount, selectedVoucher.value);
    }
  }
  const total = subtotal - discount;

  // T·ª± ƒë·ªông chuy·ªÉn v·ªÅ COD n·∫øu ƒëang ch·ªçn VNPay m√† t·ªïng ti·ªÅn < 5,000ƒë
  useEffect(() => {
    if (form.payment === "vnpay" && total < 5000) {
      setForm((f) => ({ ...f, payment: "cod" }));
    }
  }, [total, form.payment]);

  // Ki·ªÉm tra xem ƒë√£ nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin nh·∫≠n h√†ng ch∆∞a
  const isFormInfoComplete = () => {
    return (
      selectedAddressId !== null && form.fullName && form.phone && form.email
    );
  };

  const handleOrder = async (e: React.FormEvent) => {
    e.preventDefault();

    // Ki·ªÉm tra ƒë·ªãa ch·ªâ ƒë√£ ch·ªçn
    if (!selectedAddressId) {
      toast.error("Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng");
      return;
    }

    // Ki·ªÉm tra th√¥ng tin c∆° b·∫£n
    if (!form.fullName || !form.phone || !form.email) {
      toast.error("Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin c√° nh√¢n");
      return;
    }

    setErrorFields([]);

    const orderPayload = {
      voucherId: selectedVoucher?.id,
      note: form.notes,
      cartItemIds: selectedItems,
      addressId: selectedAddressId, // G·ª≠i ID ƒë·ªãa ch·ªâ ƒë√£ ch·ªçn
    };

    try {
      const orderId = await api.post("/order/from-cart", orderPayload);
      if (form.payment === "cod") {
        await api.post("/payment/create-payment-cash", {
          orderId: orderId.data.id,
        });
        toast("ƒê·∫∑t h√†ng th√†nh c√¥ng", {
          type: "success",
        });
      } else {
        const paymentRes = await api.post("/payment/create-payment", {
          orderId: orderId.data.id,
        });
        const paymentUrl = paymentRes.data.paymentUrl;
        if (paymentUrl) {
          window.location.href = paymentUrl; // üî• T·ª± ƒë·ªông redirect
          return;
        }
      }
      // Ch·ªâ x√≥a nh·ªØng cart items ƒë√£ ƒë∆∞·ª£c thanh to√°n
      removeMultipleFromCart(selectedItems);
      localStorage.removeItem("cart_selected");

      // Chuy·ªÉn v·ªÅ trang ch·ªß sau khi x·ª≠ l√Ω xong
      setTimeout(() => {
        router.push("/");
      }, 1500);
    } catch (error: unknown) {
      const messages = "An unknown error occurred";

      if (axios.isAxiosError(error)) {
        return error.response?.data?.message;
      }
      toast(messages, {
        type: "error",
      });
    }
  };

  return (
    <>
      <main className="main-content">
        <div className="container py-4">
          <div className="row">
            {/* C·ªôt tr√°i: M·∫∑c ƒë·ªãnh hi·ªÉn th·ªã th√¥ng tin nh·∫≠n h√†ng, ch·ªâ thay ƒë·ªïi khi ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n */}
            <div className="col-md-7">
              {form.payment === "vnpay" ? (
                // Hi·ªÉn th·ªã form th√¥ng tin v√≠ ƒëi·ªán t·ª≠
                <div>
                  <div
                    className="alert mb-4"
                    style={{
                      backgroundColor: "#f0fdf4",
                      borderColor: "#bbf7d0",
                      color: "#166534",
                    }}
                  >
                    <h5 className="fw-bold">Th√¥ng tin v√≠ ƒëi·ªán t·ª≠</h5>
                    <p className="mb-0">
                      Vui l√≤ng ch·ªçn v√≠ ƒëi·ªán t·ª≠ v√† ƒëi·ªÅn th√¥ng tin thanh to√°n
                    </p>
                  </div>
                  <div
                    className="bg-white p-4 rounded-3"
                    style={{ border: "1.5px solid #f3f3f3" }}
                  >
                    <div className="row g-3">
                      <div className="col-12">
                        <label>Ch·ªçn v√≠ ƒëi·ªán t·ª≠ *</label>
                        <select
                          className="form-control"
                          defaultValue=""
                          style={{
                            borderColor: "#bbf7d0",
                            backgroundColor: "#f0fdf4",
                          }}
                        >
                          <option value="vnpay">VNPay</option>
                        </select>
                      </div>
                      <div className="col-12">
                        <label>S·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω v√≠ *</label>
                        <input
                          className="form-control"
                          placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒëƒÉng k√Ω v√≠ ƒëi·ªán t·ª≠"
                          style={{
                            borderColor: "#bbf7d0",
                            backgroundColor: "#f0fdf4",
                          }}
                        />
                      </div>
                      <div className="col-12">
                        <label>Email (n·∫øu c√≥)</label>
                        <input
                          className="form-control"
                          placeholder="Nh·∫≠p email (kh√¥ng b·∫Øt bu·ªôc)"
                          style={{
                            borderColor: "#bbf7d0",
                            backgroundColor: "#f0fdf4",
                          }}
                        />
                      </div>
                      <div className="col-12">
                        <div
                          className="alert"
                          style={{
                            backgroundColor: "#f0fdf4",
                            borderColor: "#bbf7d0",
                            color: "#166534",
                          }}
                        >
                          <strong>H∆∞·ªõng d·∫´n:</strong> Sau khi x√°c nh·∫≠n, b·∫°n s·∫Ω
                          ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang thanh to√°n c·ªßa v√≠ ƒëi·ªán t·ª≠ ƒë√£
                          ch·ªçn.
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              ) : (
                // Hi·ªÉn th·ªã form th√¥ng tin nh·∫≠n h√†ng (m·∫∑c ƒë·ªãnh) khi ch∆∞a ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ho·∫∑c COD
                <>
                  <h3 className="fw-bold mb-3">
                    <i className="fa-solid fa-user me-2"></i>
                    Th√¥ng tin nh·∫≠n h√†ng
                  </h3>
                  {!form.payment && (
                    <div
                      className="alert mb-3"
                      style={{
                        backgroundColor: "#f0fdf4",
                        borderColor: "#bbf7d0",
                        color: "#166534",
                      }}
                    >
                      <i className="fa-solid fa-info-circle me-2"></i>
                      <strong>B∆∞·ªõc 1:</strong>Vui l√≤ng ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng
                      b√™n d∆∞·ªõi, sau ƒë√≥ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ·ªü b√™n ph·∫£i.
                    </div>
                  )}
                  <div className="row g-3">
                    <div className="col-12">
                      <label>H·ªç v√† t√™n *</label>
                      <input
                        disabled
                        className="form-control"
                        value={profile?.name || ""}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, fullName: e.target.value }))
                        }
                      />
                    </div>
                    <div></div>
                    <div className="col-12">
                      <label>Ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng *</label>
                      {addressLoading ? (
                        <div className="text-center py-3">
                          <div
                            className="spinner-border text-primary"
                            role="status"
                          >
                            <span className="visually-hidden">Loading...</span>
                          </div>
                          <p className="mt-2 text-muted">
                            ƒêang t·∫£i danh s√°ch ƒë·ªãa ch·ªâ...
                          </p>
                        </div>
                      ) : addresses.length === 0 ? (
                        <div className="alert alert-warning">
                          <i className="fa-solid fa-exclamation-triangle me-2"></i>
                          B·∫°n ch∆∞a c√≥ ƒë·ªãa ch·ªâ n√†o. Vui l√≤ng th√™m ƒë·ªãa ch·ªâ trong{" "}
                          <a href="/profile" className="alert-link">
                            th√¥ng tin c√° nh√¢n
                          </a>
                          .
                        </div>
                      ) : (
                        <select
                          className="form-control"
                          value={selectedAddressId || ""}
                          onChange={(e) =>
                            setSelectedAddressId(Number(e.target.value))
                          }
                        >
                          <option value="">-- Ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng --</option>
                          {addresses.map((address) => (
                            <option key={address.id} value={address.id}>
                              {address.street}, {address.district},{" "}
                              {address.city}
                              {address.is_default && " (M·∫∑c ƒë·ªãnh)"}
                            </option>
                          ))}
                        </select>
                      )}
                    </div>
                    <div className="col-md-6">
                      <label>S·ªë ƒëi·ªán tho·∫°i *</label>
                      <input
                        disabled
                        className="form-control"
                        value={profile?.phone || ""}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, phone: e.target.value }))
                        }
                      />
                    </div>
                    <div className="col-md-6">
                      <label>Email *</label>
                      <input
                        disabled
                        className="form-control"
                        value={profile?.email || ""}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, email: e.target.value }))
                        }
                      />
                    </div>

                    <div className="col-12">
                      <label>Ghi ch√∫ ƒë∆°n h√†ng (kh√¥ng b·∫Øt bu·ªôc)</label>
                      <textarea
                        className="form-control"
                        value={form.notes}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, notes: e.target.value }))
                        }
                      />
                    </div>
                  </div>
                </>
              )}
            </div>

            {/* C·ªôt ph·∫£i: ƒê∆°n h√†ng */}
            <div className="col-md-5">
              <div
                className="bg-white p-3 rounded-3 mb-4"
                style={{ border: "1.5px solid #f3f3f3" }}
              >
                <h5 className="fw-bold mb-3">ƒê∆°n h√†ng c·ªßa b·∫°n</h5>

                {selectedVoucher &&
                  subtotal < selectedVoucher.min_order_value && (
                    <div className="alert alert-warning mt-2">
                      B·∫°n kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán ƒë·ªÉ d√πng voucher n√†y (ƒê∆°n t·ªëi thi·ªÉu:{" "}
                      {selectedVoucher.min_order_value.toLocaleString("vi-VN")}
                      ‚Ç´)
                    </div>
                  )}
                <table className="table mb-3">
                  <thead>
                    <tr>
                      <th>S·∫£n ph·∫©m</th>
                      <th className="text-end">T·∫°m t√≠nh</th>
                    </tr>
                  </thead>
                  <tbody>
                    {cart?.length > 0 &&
                      cart
                        .filter((item) => selectedItems.includes(item.id))
                        .map((item) => (
                          <tr key={item.id}>
                            <td>
                              {item.product.name} √ó{item.quantity}
                            </td>
                            <td className="text-end">
                              {(
                                item.product.price *
                                (1 - item.product.discount / 100) *
                                item.quantity
                              ).toLocaleString("vi-VN")}
                              ‚Ç´
                            </td>
                          </tr>
                        ))}
                    <tr>
                      <td>
                        <b>T·∫°m t√≠nh</b>
                      </td>
                      <td className="text-end">
                        {subtotal.toLocaleString("vi-VN")}‚Ç´
                      </td>
                    </tr>
                    <tr>
                      <td>Gi·∫£m gi√° voucher</td>
                      <td className="text-end">
                        -{discount.toLocaleString("vi-VN")}‚Ç´
                      </td>
                    </tr>
                    <tr>
                      <td>
                        <b>T·ªïng c·ªông</b>
                      </td>
                      <td className="text-end">
                        <b style={{ color: "#22c55e", fontSize: 18 }}>
                          {total.toLocaleString("vi-VN")}‚Ç´
                        </b>
                      </td>
                    </tr>
                  </tbody>
                </table>
                <div className="mb-3">
                  <label className="fw-bold mb-2">M√£ gi·∫£m gi√°</label>
                  <div className="d-flex align-items-center mb-3">
                    <div className="d-flex align-items-center gap-2 flex-wrap">
                      {vouchers.map((voucher) => (
                        <div
                          onClick={() => setSelectedVoucher(voucher)}
                          className={`badge ${
                            voucher.id === selectedVoucher?.id
                              ? ""
                              : "badge-foreground"
                          }`}
                          key={voucher.id}
                        >
                          {voucher.code}
                        </div>
                      ))}

                      {/* {selectedProductVoucher && (
                        <div className="badge bg-success me-1">
                          S·∫£n ph·∫©m: {selectedProductVoucher}
                        </div>
                      )}
                      {selectedShippingVoucher && (
                        <div className="badge bg-info">
                          V·∫≠n chuy·ªÉn: {selectedShippingVoucher}
                        </div>
                      )} */}
                      {/* {!(selectedProductVoucher || selectedShippingVoucher) && (
                        <span className="text-muted">
                          Ch∆∞a ch·ªçn m√£ gi·∫£m gi√°
                        </span>
                      )} */}
                    </div>
                  </div>

                  {!isFormInfoComplete() ? (
                    <div className="alert alert-warning">
                      <i className="fa-solid fa-exclamation-triangle me-2"></i>
                      <strong>
                        Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin nh·∫≠n h√†ng tr∆∞·ªõc khi ch·ªçn
                        ph∆∞∆°ng th·ª©c thanh to√°n
                      </strong>
                    </div>
                  ) : (
                    <>
                      <div
                        className="alert mb-3"
                        style={{
                          backgroundColor: "#f0fdf4",
                          borderColor: "#bbf7d0",
                          color: "#166534",
                        }}
                      >
                        <i className="fa-solid fa-check-circle me-2"></i>
                        <strong>Th√¥ng tin nh·∫≠n h√†ng ƒë√£ ƒë·∫ßy ƒë·ªß!</strong> B√¢y gi·ªù
                        b·∫°n c√≥ th·ªÉ ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.
                      </div>
                      <div className="form-check mt-2">
                        <input
                          type="radio"
                          className="form-check-input"
                          checked={form.payment === "vnpay"}
                          disabled={total < 5000}
                          onChange={() =>
                            setForm((f) => ({ ...f, payment: "vnpay" }))
                          }
                        />
                        <label className="form-check-label">
                          <b>V√≠ ƒëi·ªán t·ª≠ (VNPay)</b>
                          {total < 5000 && (
                            <span className="text-danger ms-2">
                              (T·ªëi thi·ªÉu 5,000ƒë)
                            </span>
                          )}
                        </label>
                        <div className="small text-muted ms-4">
                          {total < 5000 ? (
                            <span className="text-danger">
                              ƒê∆°n h√†ng t·ªëi thi·ªÉu 5,000ƒë ƒë·ªÉ s·ª≠ d·ª•ng VNPay
                            </span>
                          ) : (
                            "Thanh to√°n nhanh ch√≥ng v√† an to√†n qua v√≠ ƒëi·ªán t·ª≠. B·∫°n s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn trang thanh to√°n."
                          )}
                        </div>
                      </div>
                      <div className="form-check mt-2">
                        <input
                          type="radio"
                          className="form-check-input"
                          checked={form.payment === "cod"}
                          onChange={() =>
                            setForm((f) => ({ ...f, payment: "cod" }))
                          }
                        />
                        <label className="form-check-label">
                          Thanh to√°n khi nh·∫≠n h√†ng
                        </label>
                      </div>
                    </>
                  )}
                </div>

                {/* Th√¥ng b√°o l·ªói n·∫øu thi·∫øu th√¥ng tin */}
                {errorFields.length > 0 && (
                  <div className="alert alert-danger">
                    B·∫°n ch∆∞a nh·∫≠p: {errorFields.join(", ")}
                  </div>
                )}
                <button
                  className="btn btn-primary w-100 fw-bold"
                  style={{
                    background:
                      isFormInfoComplete() && form.payment
                        ? "#22c55e"
                        : "#bdbdbd",
                    border: 0,
                    borderRadius: 8,
                    fontSize: 18,
                    opacity: isFormInfoComplete() && form.payment ? 1 : 0.7,
                    cursor:
                      isFormInfoComplete() && form.payment
                        ? "pointer"
                        : "not-allowed",
                  }}
                  disabled={!isFormInfoComplete() || !form.payment}
                  onClick={handleOrder}
                >
                  {!isFormInfoComplete()
                    ? "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin"
                    : !form.payment
                    ? "Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n"
                    : "ƒê·∫∑t h√†ng"}
                </button>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  );
}

export default CheckoutPage;
