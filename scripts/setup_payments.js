const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

async function setupPaymentsTable() {
  let connection;
  
  try {
    // K·∫øt n·ªëi database
    connection = await mysql.createConnection({
      host: 'localhost',
      port: 8889,
      user: 'root',
      password: 'root', // Password t·ª´ db.ts
      database: 'tap_hoa_xanh'
    });

    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database th√†nh c√¥ng');

    // ƒê·ªçc file SQL
    const sqlFile = path.join(__dirname, 'add_payments_table.sql');
    const sqlContent = fs.readFileSync(sqlFile, 'utf8');

    // Th·ª±c thi t·ª´ng c√¢u l·ªánh SQL
    const statements = sqlContent.split(';').filter(stmt => stmt.trim());

    for (const statement of statements) {
      if (statement.trim()) {
        try {
          await connection.execute(statement);
          console.log('‚úÖ Th·ª±c thi th√†nh c√¥ng:', statement.substring(0, 50) + '...');
        } catch (error) {
          if (error.code === 'ER_DUP_FIELDNAME') {
            console.log('‚ÑπÔ∏è C·ªôt ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
          } else if (error.code === 'ER_TABLE_EXISTS_ERROR') {
            console.log('‚ÑπÔ∏è B·∫£ng ƒë√£ t·ªìn t·∫°i, b·ªè qua...');
          } else {
            console.error('‚ùå L·ªói th·ª±c thi SQL:', error.message);
          }
        }
      }
    }

    console.log('üéâ Ho√†n th√†nh t·∫°o b·∫£ng payments!');

  } catch (error) {
    console.error('‚ùå L·ªói k·∫øt n·ªëi database:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° H√£y ƒë·∫£m b·∫£o MySQL server ƒëang ch·∫°y');
    } else if (error.code === 'ER_ACCESS_DENIED_ERROR') {
      console.log('üí° H√£y ki·ªÉm tra username/password MySQL');
    }
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

// Ch·∫°y script
setupPaymentsTable();
