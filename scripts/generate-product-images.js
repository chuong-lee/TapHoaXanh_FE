const fs = require('fs');
const path = require('path');

// T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
const imagesDir = path.join(__dirname, '../public/client/images');
if (!fs.existsSync(imagesDir)) {
  fs.mkdirSync(imagesDir, { recursive: true });
}

// Copy file product.png th√†nh nhi·ªÅu file kh√°c nhau
const sourceFile = path.join(imagesDir, 'product.png');

if (fs.existsSync(sourceFile)) {
  console.log('‚úÖ File product.png ƒë√£ t·ªìn t·∫°i, s·ª≠ d·ª•ng l√†m placeholder');
  
  // T·∫°o th√™m m·ªôt s·ªë file placeholder kh√°c
  const placeholderFiles = [
    'product-placeholder-1.png',
    'product-placeholder-2.png', 
    'product-placeholder-3.png',
    'product-placeholder-4.png',
    'product-placeholder-5.png'
  ];
  
  placeholderFiles.forEach((filename, index) => {
    const targetFile = path.join(imagesDir, filename);
    if (!fs.existsSync(targetFile)) {
      fs.copyFileSync(sourceFile, targetFile);
      console.log(`‚úÖ ƒê√£ t·∫°o ${filename}`);
    } else {
      console.log(`‚è≠Ô∏è  ${filename} ƒë√£ t·ªìn t·∫°i`);
    }
  });
  
  console.log('\nüéâ Ho√†n th√†nh t·∫°o h√¨nh ·∫£nh placeholder!');
  console.log('üìÅ C√°c file ƒë√£ t·∫°o:');
  fs.readdirSync(imagesDir)
    .filter(file => file.includes('product') || file.includes('placeholder'))
    .forEach(file => console.log(`   - ${file}`));
    
} else {
  console.log('‚ùå Kh√¥ng t√¨m th·∫•y file product.png');
  console.log('üí° H√£y t·∫°o file product.png trong public/client/images/ tr∆∞·ªõc');
}
